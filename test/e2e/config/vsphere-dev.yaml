---
# E2E test scenario using local dev images and manifests built from the source tree for following providers:
# - cluster-api
# - bootstrap kubeadm
# - control-plane kubeadm
# - vsphere

# For creating local dev images built from the source tree;
# - from the CAPI repository root, `make docker-build REGISTRY=gcr.io/k8s-staging-cluster-api` to build the cluster-api, bootstrap kubeadm, control-plane kubeadm provider images.
# - from the CAPV repository root, `make -C ../cluster-api-provider-vsphere docker-build DEV_REGISTRY=gcr.io/k8s-staging-cluster-api` to build the vsphere provider image.

# For creating local dev manifests built from the source tree;
# - from the CAPV repository root,` make -C ../cluster-api-provider-vsphere dev-manifests DEV_REGISTRY=gcr.io/k8s-staging-cluster-api` to generate the vsphere provider manifest overrides.

images:
# Use local dev images built source tree;
- name: gcr.io/k8s-staging-cluster-api/cluster-api-controller-amd64:dev
  loadBehavior: mustLoad
- name: gcr.io/k8s-staging-cluster-api/kubeadm-bootstrap-controller-amd64:dev
  loadBehavior: mustLoad
- name: gcr.io/k8s-staging-cluster-api/kubeadm-control-plane-controller-amd64:dev
  loadBehavior: mustLoad
- name: gcr.io/k8s-staging-cluster-api/vsphere-manager:dev
  loadBehavior: mustLoad

providers:

- name: cluster-api
  type: CoreProvider
  versions:
  - name: v0.3.0
  # Use manifest from source files
    value: ../../../config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"
    - old: "--enable-leader-election"
      new: "--enable-leader-election=false"

- name: kubeadm
  type: BootstrapProvider
  versions:
  - name: v0.3.0
  # Use manifest from source files
    value: ../../../bootstrap/kubeadm/config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"
    - old: "--enable-leader-election"
      new: "--enable-leader-election=false"

- name: kubeadm
  type: ControlPlaneProvider
  versions:
  - name: v0.3.0
  # Use manifest from source files
    value: ../../../controlplane/kubeadm/config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"
    - old: "--enable-leader-election"
      new: "--enable-leader-election=false"

- name: vsphere
  type: InfrastructureProvider
  versions:
  - name: v0.6.0
  # Use manifest from source files
    value: ../../../../cluster-api-provider-vsphere/.build/config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"

  files:
  # Add a cluster template
  - sourcePath: "../../../test/e2e/data/infrastructure-vsphere/cluster-template.yaml"

variables:
  KUBERNETES_VERSION: "v1.17.0"
  CNI: "./data/cni/calico/calico.yaml"
  CONTROL_PLANE_MACHINE_COUNT: 1
  WORKER_MACHINE_COUNT: 1
  # Following CAPV variables should be set before testing
  VSPHERE_SERVER: "vcenter.vmware.com"
  VSPHERE_DATACENTER: "Datacenter"
  VSPHERE_DATASTORE: "WorkloadDatastore"
  VSPHERE_FOLDER: "FolderName"
  VSPHERE_HAPROXY_TEMPLATE: "capv-haproxy-v0.6.3"
  VSPHERE_NETWORK: "network-1"
  VSPHERE_RESOURCE_POOL: "ResourcePool"
  VSPHERE_TEMPLATE: "ubuntu-1804-kube-v1.17.0"
  # Also following variables are required but it is recommended to use env variables to avoid disclosure of sensitive data
  # VSPHERE_SSH_AUTHORIZED_KEY=
  # VSPHERE_PASSWORD=
  # VSPHERE_USERNAME=

intervals:
  default/wait-controllers: ["3m", "10s"]
  default/wait-cluster: ["3m", "10s"]
  default/wait-control-plane: ["5m", "10s"]
  default/wait-worker-nodes: ["3m", "10s"]
  default/wait-delete-cluster: ["3m", "10s"]
  default/wait-machine-upgrade: ["15m", "1m"]