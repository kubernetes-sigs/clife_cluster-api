---
# E2E test scenario using local dev images and manifests built from the source tree for following providers:
# - cluster-api
# - bootstrap kubeadm
# - control-plane kubeadm
# - aws

# For creating local dev images built from the source tree;
# - from the CAPI repository root, `make docker-build REGISTRY=gcr.io/k8s-staging-cluster-api` to build the cluster-api, bootstrap kubeadm, control-plane kubeadm provider images.
# - from the CAPA repository root, `make docker-build REGISTRY=gcr.io/k8s-staging-cluster-api` to build the aws provider image.

# Following env variables should be set before running the provider

# export AWS_REGION=
# export AWS_SSH_KEY_NAME=
# export AWS_B64ENCODED_CREDENTIALS=

images:
# Use local dev images built source tree;
- name: gcr.io/k8s-staging-cluster-api/cluster-api-controller-amd64:dev
  loadBehavior: mustLoad
- name: gcr.io/k8s-staging-cluster-api/kubeadm-bootstrap-controller-amd64:dev
  loadBehavior: mustLoad
- name: gcr.io/k8s-staging-cluster-api/kubeadm-control-plane-controller-amd64:dev
  loadBehavior: mustLoad
- name: gcr.io/k8s-staging-cluster-api/cluster-api-aws-controller-amd64:dev
  loadBehavior: mustLoad
- name: quay.io/jetstack/cert-manager-cainjector:v0.11.0
  loadBehavior: tryLoad
- name: quay.io/jetstack/cert-manager-webhook:v0.11.0
  loadBehavior: tryLoad
- name: quay.io/jetstack/cert-manager-controller:v0.11.0
  loadBehavior: tryLoad

providers:

- name: cluster-api
  type: CoreProvider
  versions:
  - name: v0.3.0
  # Use manifest from source files
    value: ../../../config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"
    - old: "--enable-leader-election"
      new: "--enable-leader-election=false"

- name: kubeadm
  type: BootstrapProvider
  versions:
  - name: v0.3.0
  # Use manifest from source files
    value: ../../../bootstrap/kubeadm/config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"
    - old: "--enable-leader-election"
      new: "--enable-leader-election=false"

- name: kubeadm
  type: ControlPlaneProvider
  versions:
  - name: v0.3.0
  # Use manifest from source files
    value: ../../../controlplane/kubeadm/config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"
    - old: "--enable-leader-election"
      new: "--enable-leader-election=false"

- name: aws
  type: InfrastructureProvider
  versions:
  - name: v0.5.0
  # Use manifest from source files
    value: ../../../../cluster-api-provider-aws/config
    replacements:
    - old: "imagePullPolicy: Always"
      new: "imagePullPolicy: IfNotPresent"
    - old: "--enable-leader-election"
      new: "--enable-leader-election=false"
  files:
  # Add a cluster template
  - sourcePath: "../data/infrastructure-aws/cluster-template.yaml"

variables:
  KUBERNETES_VERSION: "v1.17.0"
  CNI: "./data/cni/calico/calico.yaml"
  AWS_CONTROL_PLANE_MACHINE_TYPE: t3.large
  AWS_NODE_MACHINE_TYPE: t3.large
  # Also following variables are required but it is recommended to use env variables to avoid disclosure of sensitive data
  # AWS_REGION=
  # AWS_SSH_KEY_NAME=
  # AWS_B64ENCODED_CREDENTIALS=

intervals:
  default/wait-controllers: ["3m", "10s"]
  default/wait-cluster: ["20m", "10s"]
  default/wait-control-plane: ["10m", "10s"]
  default/wait-worker-nodes: ["10m", "10s"]
  default/wait-delete-cluster: ["20m", "10s"]
  default/wait-machine-upgrade: ["20m", "10s"]
